{
  "DOM duh&nbsp;dah dum...": {
    "100": {
      "question": "This DOM API function is attached to HTMLNodes and lets you tack on additional elements to the end of the target.",
      "answer": "Element.appendChild()"
    },
    "200": {
      "question": "This is the state of a failed Promise. It better have a good reason.",
      "answer": "Rejected. (A pending promise can either be fulfilled with a value, or rejected with a reason (error))"
    },
    "300": {
      "question": "Where am I? Look through the `window` and figure out this useful useful piece of information.",
      "answer": "Location."
    },
    "400": {
      "question": "This powerful web API put the X in AJAX and helped usher in Web 2.0 and 'living documents'",
      "answer": "XMLHttpRequest."
    },
    "500": {
      "question": "This is the (short & sweet) JS that would allow you to grab all of the text on the entire page.",
      "answer": "document.body.innerText"
    }
  },
  "CSS Tricks": {
    "100": {
      "question": "Front-enders once employed multiple background images and nested `div`s to achieve the rounding effect possible with this one property.",
      "answer": "Border radius."
    },
    "200": {
      "question": "Floated objects do not add to the height of the object they reside in properly, unless you do this...",
      "answer": "Clear the floats / use a clearfix."
    },
    "300": {
      "question": "With flexbox, you can center an element on the page by setting these two properties to `center`",
      "answer": "\"justify-content\" and \"align-items\""
    },
    "400": {
      "question": "Check out this flipping Jeopardy tile! This CSS property makes sure that when you flip an element in 3d space, you can't see the element's back side.",
      "answer": "backface-visibility (: hidden;)"
    },
    "500": {
      "question": "This is a group of APIs that give developers direct access to the CSS Object Model (CSSOM), enabling developers to write code the browser can parse as CSS",
      "answer": "CSS Houdini"
    }
  },
  "Browserified": {
    "100": {
      "question": "As of March, 2020 this browser commanded 4.42% of global market share",
      "answer": "Firefox."
    },
    "200": {
      "question": "With 38% of global market share, this operating system is number one.",
      "answer": "Android (Windows at 35%, iOS at 14%)"
    },
    "300": {
      "question": "This is what the acronym URL stands for",
      "answer": "Uniform Resource Locator"
    },
    "400": {
      "question": "This browser, released in 1995, was the first to include a public release of Javascript.",
      "answer": "Netscape navigator (2.0)"
    },
    "500": {
      "question": "Webkit is the rendering engine behind Apple Safari, and Gecko is the engine behind Mozilla Firefox. This is the name of the Google-specific fork of Webkit, which powers Google Chrome.",
      "answer": "Blink."
    }
  },
  "Essential Elements": {
    "100": {
      "question": "Yo dawg. Xzibit heard you liked browsing contexts. So he used this element to put a new browsing context inside your existing browsing context so you can browse contexts while you browse contexts.",
      "answer": "<iframe>"
    },
    "200": {
      "question": "This HTML element creates a collapsible \"accordion\"-like UI that lets use open/collapse content without the use of javascript.",
      "answer": "<details> (and <summary>)"
    },
    "300": {
      "question": "Want to bump up the size of some text? This now-obsolete element once used to do the trick.",
      "answer": "<big> (like <small>)"
    },
    "400": {
      "question": "This HTML tag lets you create clickable areas on images, which can be treated as hyperlinks.",
      "answer": "<map>"
    },
    "500": {
      "question": "According to a random github gist (with zero due diligence performed on my part), the shortest valid html document includes a <!doctype html> tag and this one other element.",
      "answer": "<!doctype html><title>This title is required.</title>"
    }
  },
  "ðŸ˜³ JS&nbsp;Wat": {
    "100": {
      "question": "1 + 1 + \"1\"",
      "answer": "\"21\""
    },
    "200": {
      "question": "[] + []",
      "answer": "\"\""
    },
    "300": {
      "question": "{} + []",
      "answer": "0"
    },
    "400": {
      "question": "typeof []",
      "answer": "\"object\""
    },
    "500": {
      "question": "Array(16).join(\"wat\" - 1) + \" Batman!\"",
      "answer": "\"NaNNaNNaNNaNNaNNaNNaN NaNNaNNaNNaNNaNNaNNaNNaN Batman!\""
    }
  }
}
